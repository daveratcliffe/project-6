{"version":3,"sources":["Header.js","Modal.js","Intro.js","Compose.js","Error.js","Search.js","Verse.js","Haiku.js","firebase.js","Logbook.js","Footer.js","Finish.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","onClick","this","props","toggleModal","Component","Modal","Intro","state","showing","buttonState","toggleClick","e","setState","changeVerseVisible","Compose","calculateFilledSylls","line","length","map","wordObj","numSyllables","reduce","accumulator","currentValue","getWords","word","axios","url","responseType","method","params","rel_bga","md","then","response","filterResults","data","array","filteredArray","filter","remainSylls","randomize","slicedAndFiltered","slice","results","random","temp","i","Math","floor","handleSelect","target","dataset","sylls","syll","userSelect","handleSubmit","preventDefault","lineInProgress","parseInt","updateHaiku","lineNumber","removeLastWord","newLineInProgress","deletedWord","pop","reRenderVerse","removeEverything","totalSylls","htmlFor","name","id","data-syll","data-word","score","Error","Search","getSuggestions","test","s","capitalizedArray","item","showError","charAt","toUpperCase","splice","suggestions","getWordInfo","sp","updateSearchQuery","autoComplete","type","placeholder","onChange","value","data-name","Verse","searchQuery","reRender","forrceUpdate","getHaikus","goToPreviousLine","Haiku","active","wordObject","join","lineLength","line1","printLine","lastWord","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Logbook","database","ref","on","dbResult","val","Object","values","allHaikus","haiku","tabIndex","line2","line3","Footer","href","rel","Finish","saveHaiku","push","document","querySelector","style","display","App","numberOfLine","lineText","verseVisible","headerVisible","prevVerseVisible","modalVisible","totalNumSyllables","startAgain","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c66ee310.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport { GiShipWheel } from 'react-icons/gi';\r\n\r\nclass Header extends Component {\r\n    render(){\r\n        return(\r\n            <header>\r\n                <h1>Haikus Ahoy!</h1>\r\n    \r\n                <span className=\"flexContainer\">< GiShipWheel/><h2>Knowing The Ropes</h2></span>\r\n\r\n                <button onClick={this.props.toggleModal}>Click here for instructions</button>\r\n    \r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import { Component } from \"react\";\r\nimport { GrClose } from 'react-icons/gr';\r\nimport { GiShipWheel } from 'react-icons/gi';\r\n\r\nclass Modal extends Component {\r\n\r\n    render() {\r\n        return (\r\n\r\n            <section className=\"modal\">\r\n\r\n                <div>\r\n                    <span className=\"flexContainer\">< GiShipWheel /><h2>Knowing The Ropes</h2></span>\r\n\r\n                    <button onClick={this.props.toggleModal}>< GrClose /></button>\r\n\r\n                    <p>Welcome to Haiku Ahoy, Mate!</p>\r\n\r\n                    <h3>Starting word:</h3>\r\n                    <ul>\r\n                        <li>Step 1: Start entering letters into the text box.</li>\r\n                        <li>Step 2: Five autocomplete words will be displayed on the page - keep entering letters until you get the desired word.</li>\r\n                        <li>Step 3: Click on a word to select it as your starting word for the verse</li>\r\n                    </ul>\r\n\r\n                    <h3>Following words:</h3>\r\n                    <ul>\r\n                        <li>Step 4: Once you have selected your first word by clicking on it    the app will generate a list of 5 words that often follow that word.</ li>\r\n                        <li>Step 5: Click on a word to add it to the end of your verse.</li>\r\n                        <li>Step 6: The app will generate new words until you have reached the  appropriate number of syllables for that verse (5 - 7 - 5).</li>\r\n                    </ul>\r\n\r\n                    <h3>Going back:</h3>\r\n                    <ul>\r\n                        <li>If you want to change your haiku in progress, click on the “go to   previous line” button. You will then be able to remove words and  obtain new suggestions. </li>\r\n                    </ul>\r\n\r\n                    <h3>Clear line:</h3>\r\n                    <ul>\r\n                        <li>Clicking on the “clear line” button will clear your line in progress!</li>\r\n                    </ul>\r\n\r\n                    <p>Once you have finished your haiku, you may save it to the log book for other guests to read.</p>\r\n\r\n                    <p>Are you ready to set sail?</p></div>\r\n\r\n            </section>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;\r\n\r\n","import { Component } from \"react\";\r\nimport './App.css'\r\n\r\nclass Intro extends Component {\r\n\r\n    state = {\r\n        showing: false,\r\n        buttonState: \"\"\r\n    };\r\n\r\n    toggleClick = (e) => {\r\n        let className = \"\";\r\n\r\n        if (!this.state.showing) {className = \"moveUp\"}\r\n\r\n        this.setState({\r\n            showing: !this.state.showing,\r\n            buttonState: className \r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Wrapper\">\r\n                <div className=\"Intro\">\r\n                    <button className={`button title ${this.state.buttonState}`} onClick={this.toggleClick} >Haiku Ahoy!</button>\r\n\r\n                    { this.state.showing\r\n                        ? <div className=\"Introduction\" >\r\n                            <article>\r\n                                <p>A haiku (俳句 high-koo) is a short three-line poem that usually follows a 5-7-5 syllable structure. Haiku poetry was originally developed by Japanese poets, and is often inspired by nature, a moment of beauty, or a poignant experience.</p>\r\n                                <h1>How to write Haiku:</h1>\r\n                                <p className=\"HowTo\">Haikus follow a strict form:<br />\r\n                                Three lines, with a 5-7-5 syllable structure. That means the first line will have five syllables, the second line will have seven syllables, and the last line will have five syllables.</p>\r\n\r\n                                <h2>Examples of Haikus:</h2>\r\n                                <p className=\"example\">\r\n                                    A winter blanket<br />\r\n                                    covers the Earth in repose<br />\r\n                                    but only a dream\r\n                                </p>\r\n                                <button className=\"button CreateOwn\" onClick={this.props.changeVerseVisible}>Create your own!</button>\r\n                                {/* Make an arrow here */}\r\n                            </article>\r\n                        \r\n                        </div>\r\n                        : null\r\n                        }\r\n                </div>\r\n            </div>\r\n        )}\r\n}\r\n\r\nexport default Intro;","import { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\n//Make a second API call within the component, passing the word as a parameter.\r\n//For the API call, we need: user word\r\n// This API call will return a list of words that usually follow that word in the English language\r\n// Filter/other method that array of results to get the words with the correct number of syllables (ie if the user inputs a 2 syllable word, we will give them results with <= 3 syllables)\r\n\r\nclass Compose extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      remainSylls: null, //remaining syllables for the line - passed as props\r\n      userSelect: {\r\n        word: \"\", //the word the user selects\r\n        numSyllables: null, //num of syllables for the selected words\r\n      },\r\n      lineInProgress: \"\", //to display the full line (user word + selected words)\r\n      results: [], //array of words returns from the API call\r\n    };\r\n  }\r\n\r\n  //on mount - get words and set state\r\n  componentDidMount() {\r\n    this.calculateFilledSylls();\r\n    //API call to get the words that normally follow the word in the user input\r\n    this.setState(\r\n      {\r\n        lineInProgress:\r\n          // this.props.line.length > 1 ? this.props.line : [this.props.word],\r\n          this.props.line.length > 0\r\n            ? this.props.line\r\n            : [{ word: this.props.word, numSyllables: this.props.sylls }],\r\n\r\n        remainSylls:\r\n          this.props.totalSylls -\r\n          (this.props.sylls ? this.props.sylls : this.calculateFilledSylls()),\r\n        userSelect: {\r\n          numSyllables: this.props.sylls ? this.props.sylls : this.props.line[this.props.line.length - 1].numSyllables,\r\n          word: this.props.word ? this.props.word : this.props.line[this.props.line.length - 1].word,\r\n        },\r\n        //Puts the user word in Haiku component\r\n      },\r\n      () => {\r\n        this.props.updateHaiku(\r\n          this.props.lineNumber,\r\n          this.state.lineInProgress\r\n        );\r\n        this.getWords(this.state.userSelect.word);\r\n      }\r\n    );\r\n  }\r\n\r\n  calculateFilledSylls = () => {\r\n    if (this.props.line.length > 0) {\r\n      const numOfFilledSylls = this.props.line\r\n        .map((wordObj) => {\r\n          return wordObj.numSyllables;\r\n        })\r\n        .reduce((accumulator, currentValue) => {\r\n          return accumulator + currentValue;\r\n        });\r\n      return numOfFilledSylls;\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  //function to get words that normally follw the word that the user has input (or selected)\r\n  getWords = (word) => {\r\n    //API call to get the words that normally follow the word in the user input\r\n    axios({\r\n      url: \"https://api.datamuse.com/words\",\r\n      responseType: \"json\",\r\n      method: \"GET\",\r\n      params: {\r\n        rel_bga: word,\r\n        md: \"s\",\r\n      },\r\n    }).then((response) => {\r\n      //call the function to filter the results\r\n      this.filterResults(response.data);\r\n    });\r\n  };\r\n\r\n  //function to filter the array of results to only get the matching number of syllables\r\n  filterResults = (array) => {\r\n    //filter the array to find the words that have a syllable count that is smaller or equal to this.state.remainSylls\r\n    const filteredArray = array.filter((word) => {\r\n      return word.numSyllables <= this.state.remainSylls;\r\n    });\r\n    //call the function to randomize the array - this will make sure that our user gets different words every time\r\n    this.randomize(filteredArray);\r\n    //Slice the array to get only 5 results\r\n    const slicedAndFiltered = filteredArray.slice(0, 5);\r\n    //setState results with the filtered array\r\n    this.setState({\r\n      results: slicedAndFiltered,\r\n    });\r\n  };\r\n\r\n  //function to randomize the array and only get 5 results\r\n  randomize = (array) => {\r\n    let random = 0;\r\n    let temp = 0;\r\n    for (let i = 1; i < array.length; i++) {\r\n      random = Math.floor(Math.random() * i);\r\n      temp = array[i];\r\n      array[i] = array[random];\r\n      array[random] = temp;\r\n    }\r\n  };\r\n\r\n  //handleselect to set that to the word and syllable count\r\n  handleSelect = (e) => {\r\n    //store th number of syllables in a variable (because the path is long!)\r\n    const word = e.target.dataset.word;\r\n    const sylls = e.target.dataset.syll;\r\n\r\n    //set state\r\n    this.setState(\r\n      {\r\n        userSelect: {\r\n          word: word,\r\n          numSyllables: sylls,\r\n        },\r\n      },\r\n      //call the handle submit function after the userSelect state has been set\r\n      () => {\r\n        this.handleSubmit(e);\r\n      }\r\n    );\r\n  };\r\n\r\n  //When user selects a word\r\n  //call the function to get words + filter\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.setState(\r\n      {\r\n        lineInProgress: [\r\n          ...this.state.lineInProgress,\r\n          {\r\n            word: this.state.userSelect.word,\r\n            numSyllables: parseInt(this.state.userSelect.numSyllables),\r\n          },\r\n        ],\r\n        remainSylls:\r\n          this.state.remainSylls - this.state.userSelect.numSyllables,\r\n      },\r\n      //Once the lineInProgress state has been set, call the updateJaiku function to display the haiku on the page\r\n      () => {\r\n        if (this.state.remainSylls === 0) {\r\n          this.props.changeVerseVisible();\r\n        }\r\n        this.props.updateHaiku(\r\n          this.props.lineNumber,\r\n          this.state.lineInProgress\r\n        );\r\n      }\r\n    );\r\n    //call the getWords function\r\n    this.getWords(this.state.userSelect.word);\r\n  };\r\n\r\n  //function to remove the last word\r\n  removeLastWord = (e) => {\r\n    e.preventDefault();\r\n    \r\n    const newLineInProgress = [...this.state.lineInProgress];\r\n    const deletedWord = newLineInProgress.pop();\r\n    //Set line without last word in the state\r\n    this.setState(\r\n      {\r\n        //remove the last item in line in progress array\r\n        lineInProgress: newLineInProgress,\r\n        remainSylls: this.state.remainSylls + deletedWord.numSyllables,\r\n      },\r\n      () => {\r\n        //if line in prgress empty make verse update -> search appears\r\n        if(!this.state.lineInProgress===[]){\r\n          this.props.reRenderVerse();\r\n        }\r\n        //update haiku with new line in progress\r\n        this.props.updateHaiku(\r\n          this.props.lineNumber,\r\n          this.state.lineInProgress\r\n        );\r\n        //put the last item in line in progress into userSelect property in the state\r\n        this.setState(\r\n          {\r\n            userSelect: this.state.lineInProgress[\r\n              this.state.lineInProgress.length - 1\r\n            ],\r\n          },\r\n          //call the function that get the usually following words (red buttons)\r\n          () => {\r\n\r\n            if(this.state.userSelect) {\r\n              this.getWords(this.state.userSelect.word);\r\n            }\r\n\r\n          }\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  //function to remove all the words from the line\r\n  removeEverything = () => {\r\n    this.setState(\r\n      {\r\n        lineInProgress: \"\",\r\n      },\r\n      () => {\r\n        this.props.updateHaiku(\r\n          this.props.lineNumber,\r\n          this.state.lineInProgress\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Compose\">\r\n\r\n        {this.state.remainSylls !== 0 ? (\r\n          <form>\r\n            <label htmlFor=\"word\">Choose a word:</label>\r\n            <ul className=\"wordPicker\" name=\"wordSelect\" id=\"word\">\r\n              {this.state.results.map((word) => {\r\n                return word.word !== \".\" ? (\r\n                  <li\r\n                    className=\"wordOption\"\r\n                    key={word.score}\r\n                    data-syll={word.numSyllables}\r\n                    data-word={word.word}\r\n                    onClick={this.handleSelect}\r\n                  >\r\n                    {word.word}\r\n                  </li>\r\n                ) : null;\r\n              })}\r\n            </ul>\r\n            <p>Syllables left: {this.state.remainSylls}</p>\r\n          </form>\r\n        ) : (\r\n          \"Line complete\"\r\n        )}\r\n        {/* {this.state.remainSylls === 0 && (\r\n          <button onClick={this.props.changeVerseVisible}>\r\n            Go to next line\r\n          </button>\r\n        )} */}\r\n\r\n{this.state.remainSylls < 5 && (\r\n          <div className=\"controls\">\r\n            <button className=\"removeLastWord\" onClick={this.removeLastWord}>\r\n              Remove the last word\r\n            </button>\r\n\r\n            <button\r\n              className=\"removeEverything\"\r\n              onClick={this.removeEverything}\r\n            >\r\n              Clear line\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Compose;\r\n","//display error message\r\nconst Error = () => {\r\n    return(\r\n        <p>Please enter a letter to get some words.</p>\r\n    )\r\n}\r\n\r\nexport default Error;\r\n","import { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\nimport Error from \"./Error\";\r\nclass Search extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      suggestions: \"\",\r\n      showError: false\r\n    };\r\n  }\r\n\r\n  //this function gets suggested words for autocomplete from api\r\n  getSuggestions = (word) => {\r\n    //check if the word is a valid word/letter character\r\n    let wordParams = /^([a-z\\w])+$/;\r\n    //if so, lets get some words from our API!\r\n    if (wordParams.test(word) && word !== ''){\r\n      axios({\r\n        url: \"https://api.datamuse.com/sug\",\r\n        responseType: \"json\",\r\n        method: \"GET\",\r\n        params: {\r\n          s: word,\r\n        },\r\n      })\r\n      .then(({ data }) => {\r\n      //store the suggestions in an array, and filter that array to only get words (as per our regex)\r\n        const suggestions = data.filter((item) => {\r\n        const singleWord = /^([a-z])+$/;\r\n        //if the words correspond to our cirterias, lets return them and setState for our error message to no longer display\r\n            if (singleWord.test(item.word)) {\r\n            this.setState({\r\n              showError: false\r\n            })\r\n            return item;\r\n            \r\n            }\r\n            // item.word.charAt(0).toUpperCase() + item.word.slice(1)\r\n            return item.word.charAt(0).toUpperCase() + item.word.slice(1);\r\n            //splice to only get 5 word autocompletions\r\n        }).splice(0,5);\r\n\r\n        const capitalizedArray = suggestions.map((item) => {\r\n          return {\r\n            word:item.word.charAt(0).toUpperCase() + item.word.slice(1),\r\n            numSyllables:item.numSyllables\r\n          }\r\n        })\r\n\r\n        //setState for the suggestions, they will then display on the page\r\n        this.setState({\r\n          suggestions: capitalizedArray,\r\n        });\r\n      })\r\n      } else {\r\n        //if the user query is not a word or letter\r\n        //clear the array and set the errorMsg state to true - to show the error\r\n        this.setState({\r\n          suggestions: [],\r\n          showError: true\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n  //when suggested word is clicked, this function is called. It gets the syllables number of the clicked word\r\n  getWordInfo = (e) => {\r\n    const word = e.target.dataset.name;\r\n    axios({\r\n      url: \"https://api.datamuse.com/words\",\r\n      responseType: \"json\",\r\n      method: \"GET\",\r\n      params: {\r\n        //this param tells api to pull the words that have similar prononcuation to the query. the first result will be the word itself\r\n        sp: word,\r\n        //this param tells api to include the number of syllables in response\r\n        md: \"s\",\r\n      },\r\n    }).then(({ data }) => {\r\n      //this function updates the state in app.js with the word that user clicked and the number of syllables in that word\r\n      this.props.updateSearchQuery(data[0]);\r\n    });\r\n\r\n  };\r\n  \r\n  render() {\r\n    return (\r\n      <section className=\"Search\">\r\n        <form>\r\n          <label className=\"srOnly\" htmlFor=\"search\">\r\n            Input your word\r\n          </label>\r\n          <input\r\n            autoComplete=\"off\"\r\n            type=\"text\"\r\n            id=\"search\"\r\n            placeholder=\"Enter starting word here\"\r\n            onChange={(e) => {\r\n              this.getSuggestions(e.target.value);\r\n            }}\r\n          />\r\n        </form>\r\n        {\r\n          this.state.showError\r\n          ? < Error />\r\n          : ''\r\n        }\r\n        <ul className=\"suggestedWords\">\r\n          {/* displays suggested words (if there are any) as lis */}\r\n          {this.state.suggestions &&\r\n            this.state.suggestions.map((word) => {\r\n              return (\r\n                <li\r\n                  key={word.score}\r\n                  onClick={this.getWordInfo}\r\n                  data-name={word.word}\r\n                >\r\n                  {word.word}\r\n                </li>\r\n              );\r\n            })}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Search;\r\n","import { Component } from \"react\";\r\nimport Compose from \"./Compose\";\r\nimport Search from \"./Search\";\r\n\r\nclass Verse extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      searchQuery: {\r\n        word: \"\",\r\n        numSyllables: \"\",\r\n      },\r\n    };\r\n  }\r\n\r\n  updateSearchQuery = ({ word, numSyllables }) => {\r\n    \r\n    word = word.charAt(0).toUpperCase() + word.slice(1);\r\n\r\n\r\n    this.setState({\r\n      searchQuery: {\r\n        word: word,\r\n        numSyllables: numSyllables,\r\n      },\r\n    });\r\n  };\r\n\r\n  reRender = () => {\r\n    this.forrceUpdate()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"verse\">\r\n        {/* Repeat search + haiku 3x (once for each line) */}\r\n        {this.props.line.length > 0 || this.state.searchQuery.word ? (\r\n          <Compose\r\n            updateHaiku={this.props.updateHaiku}\r\n            word={this.state.searchQuery.word}\r\n            sylls={this.state.searchQuery.numSyllables}\r\n            totalSylls={5}\r\n            lineNumber={this.props.lineNumber}\r\n            line={this.props.line}\r\n            changeVerseVisible={this.props.changeVerseVisible}\r\n            getHaikus={this.props.getHaikus}\r\n            reRenderVerse = {this.reRender}\r\n          />\r\n        ) : (\r\n            <Search updateSearchQuery={this.updateSearchQuery} />\r\n          )\r\n        }\r\n\r\n        {(this.props.lineNumber === 2 || this.props.lineNumber === 3) && (\r\n          <button onClick={this.props.goToPreviousLine}>\r\n            Go to previous line\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Verse;\r\n","import { Component } from \"react\";\r\n\r\nclass Haiku extends Component {\r\n\r\n  printLine(lineNumber){\r\n    // checks if the line is empty\r\n    if (this.props[`line${lineNumber}`].length !== 0){\r\n      // checks if the lineNumber is euqal to the active line\r\n      if(lineNumber === this.props.active && this.props.active < 4) {\r\n        // returns the line and excludes the last word by using .slice .length -1\r\n        return this.props[`line${this.props.active}`].slice(0,this.props[`line${this.props.active}`].length-1)\r\n        .map((wordObject) => {\r\n          return wordObject.word;\r\n        })\r\n        .join(\" \");\r\n      } else {// prints the whole verse if the line is not the active one\r\n        return this.props[`line${lineNumber}`].map((wordObject) => {\r\n          return wordObject.word;\r\n        })\r\n        .join(\" \");\r\n      }\r\n    }\r\n    \r\n  }\r\n\r\n  // Prints the last word that was excluded in the printLine function\r\n  lastWord(lineNumber){\r\n    let lineLength = 0;\r\n    // checks that the active line is less than 4\r\n    if (this.props.active < 4){\r\n      // gets the length of the line\r\n      lineLength = this.props[`line${this.props.active}`].length;\r\n    // if the length is not 0, and the line is the active line: print the final word with the class of CurrentWord which has the underline styling in css\r\n      if(this.props[`line${this.props.active}`].length !== 0 && lineNumber === this.props.active) {\r\n        return <span className=\"CurrentWord\">{this.props[`line${this.props.active}`][lineLength-1].word}</span>;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      \r\n      <section className=\"haiku\">\r\n        <h3>Let's write some Haiku</h3>\r\n\r\n        <p>\r\n          <span> </span>\r\n          {/* display only the words, not syllables */}\r\n          {this.props.line1 &&\r\n          // printLine: prints the verse and excludes the last word\r\n          // lastWord: prints the last word with the underline\r\n              this.printLine(1)}\r\n              <span> </span>\r\n              {this.lastWord(1)}\r\n        </p>\r\n\r\n        <p>\r\n          <span> </span>\r\n          {/* display only the words, not syllables */}\r\n          {this.props.line1 &&\r\n              this.printLine(2)}\r\n              <span> </span>\r\n              {this.lastWord(2)}\r\n        </p>\r\n\r\n        <p>\r\n          <span> </span>\r\n          {/* display only the words, not syllables */}\r\n          {this.props.line1 &&\r\n              this.printLine(3)}\r\n              <span> </span>\r\n              {this.lastWord(3)}\r\n        </p>\r\n\r\n        {/* If the remaining sylls = 0 AND if line number is 3 */}\r\n        {/* {Condition to make the button appear when the syllables = 17 OR if syls remain = 0 and line3\r\n            ? <button>Save haiku</button>\r\n                //push to dbref\r\n            : ''\r\n            } */}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Haiku;\r\n","// Firebase App (the core Firebase SDK) is always required and must be listed first\r\nimport firebase from \"firebase/app\";\r\n\r\n\r\n// If you enabled Analytics in your project, add the Firebase SDK for Analytics\r\nimport \"firebase/database\";\r\n\r\n// Your web app's Firebase configuration\r\n    const firebaseConfig = {\r\n        apiKey: \"AIzaSyBk6aNK81E9i8yvY4Oc355hl2H6x8z7vp0\",\r\n        authDomain: \"haiku-ahoy.firebaseapp.com\",\r\n        projectId: \"haiku-ahoy\",\r\n        storageBucket: \"haiku-ahoy.appspot.com\",\r\n        messagingSenderId: \"342321447502\",\r\n        appId: \"1:342321447502:web:05c7ed94699f12c186b91f\"\r\n    };\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\nexport default firebase;","import { Component } from 'react';\r\nimport firebase from './firebase';\r\n\r\nclass Logbook extends Component {\r\n\r\n    componentDidMount(){\r\n        //Display the saved Haikus to the page\r\n        //Make reference to Firebase database\r\n        //Store the database reference in a variable\r\n        const dbref = firebase.database().ref();\r\n        //Obtain the data object from the Firebase using 'value' and the val (Firebase method) and setState to that array\r\n            dbref.on('value', (data) => {\r\n            let dbResult = data.val();\r\n            dbResult = Object.values(dbResult);\r\n            //call the function that sets the state of allHaikus\r\n            this.props.getHaikus(dbResult)\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n\r\n            <section className=\"logbook\">\r\n\r\n                <h2>Log Book</h2>\r\n                    \r\n                <ul>\r\n                {\r\n\r\n                    this.props.allHaikus.map((haiku) => {\r\n                        return (\r\n                            <li tabIndex=\"0\">\r\n                                <p>{haiku.line1}</p>\r\n                                <p>{haiku.line2}</p>\r\n                                <p>{haiku.line3}</p>\r\n                            </li>\r\n                        )\r\n                    })\r\n\r\n                }\r\n                </ul>\r\n\r\n            </section>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Logbook;","function Footer () {\r\n    return(\r\n        <footer>\r\n            <p>Made by the G6 Crew ⚓ @ <a href=\"https://junocollege.com/\">Juno College</a></p>\r\n            <p><a href=\"https://christinayu.dev/\" target=\"_blank\" rel=\"noreferrer\">Christina Yu</a>, <a href=\"https://daveratcliffe.com/\" target=\"_blank\" rel=\"noreferrer\">Dave Ratcliffe</a>, <a href=\"https://ermekcodes.com/\" target=\"_blank\" rel=\"noreferrer\">Ermek Barmashev</a>, <a href=\"https://sylcodes.com/\" target=\"_blank\" rel=\"noreferrer\">Syl Aucoin</a></p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import { Component } from \"react\";\r\nimport firebase from \"./firebase\";\r\nimport Haiku from \"./Haiku\";\r\n\r\nclass Finish extends Component {\r\n  saveHaiku = () => {\r\n    //create haiku object:\r\n    let haiku = {\r\n      line1:\r\n        this.props.line1 &&\r\n        this.props.line1\r\n          .map((wordObject) => {\r\n            return wordObject.word;\r\n          })\r\n          .join(\" \"),\r\n      line2:\r\n        this.props.line2 &&\r\n        this.props.line2\r\n          .map((wordObject) => {\r\n            return wordObject.word;\r\n          })\r\n          .join(\" \"),\r\n      line3:\r\n        this.props.line3 &&\r\n        this.props.line3\r\n          .map((wordObject) => {\r\n            return wordObject.word;\r\n          })\r\n          .join(\" \"),\r\n    };\r\n    //Make reference to Firebase database\r\n    //Store the database reference in a variable\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.push(haiku);\r\n    //hide the button\r\n    document.querySelector(\".save\").style.display = 'none';\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"finish\">\r\n        <h2>Smooth Sailing! Your haiku is complete.</h2>\r\n        <button className=\"save\" onClick={this.saveHaiku}>Save to Log Book</button>\r\n        <Haiku\r\n          line1={this.props.line1}\r\n          line2={this.props.line2}\r\n          line3={this.props.line3}\r\n        />\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Finish;\r\n","import { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./Header\";\r\nimport Modal from './Modal'\r\nimport Intro from \"./Intro\";\r\nimport Verse from \"./Verse\";\r\nimport Haiku from \"./Haiku\";\r\nimport Logbook from \"./Logbook\";\r\nimport Footer from \"./Footer\";\r\nimport Finish from \"./Finish\";\r\n\r\n\r\n// PSEUDO CODE\r\n// User inputs a first word - we grab that input value\r\n// On change OR on submit: Make an API call to get the number of syllables:\r\n// If the user enters a word that has more than 5 syllables\r\n// Error handling  - if there the word is not a word\r\n// Provide a visual indicator (color)\r\n// setState - word and # of syllables\r\n// Make a second API call within the component, passing the word as a parameter.\r\n// This API call will return a list of words that usually follow that word in the English language\r\n// Filter/other method that array of results to get the words with the correct number of syllables (ie if the user inputs a 2 syllable word, we will give them results with <= 3 syllables)\r\n// Display the results on the page for the user to choose from\r\n// Dave knows what’s up\r\n// User cycles through the options\r\n// Once the user selects the word, the line is then complete OR we make another API call to get the following word.\r\n// Display message (stretch goal - option to save) when the user has completed their haiku\r\n\r\n//endpoint: https://api.datamuse.com/words\r\n//Params:\r\n//rel_bga = user input = this.state.word\r\n//md = s - this is from the API, it returns the number of syllables for each result\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      verseVisible: 0,\r\n      line1: [],\r\n      line2: [],\r\n      line3: [],\r\n      headerVisible: false,\r\n      modalVisible: false,\r\n      allHaikus: [],\r\n    };\r\n  }\r\n\r\n  //Function to set the state of the line - will be passed as props to the verse\r\n  updateHaiku = (numberOfLine, lineText) => {\r\n    //storing the line number in a variable\r\n    const line = `line${numberOfLine}`;\r\n    this.setState({\r\n      [line]: lineText,\r\n    });\r\n  };\r\n\r\n  //function to change which verse is being/displayed composed on the page\r\n  changeVerseVisible = () => {\r\n    this.setState({\r\n      verseVisible: ++this.state.verseVisible,\r\n    });\r\n    //also show the header, when the verse is visible\r\n    this.setState({\r\n      headerVisible: true,\r\n    });\r\n  };\r\n\r\n  //function to allow the user to move to a previous line, mid composition\r\n  goToPreviousLine = () => {\r\n    const prevVerseVisible = this.state.verseVisible - 1;\r\n    this.setState({\r\n      verseVisible: prevVerseVisible,\r\n    });\r\n  };\r\n\r\n  //function to set the sate of allHaikus - aka populate the array from Firebase\r\n  getHaikus = (array) => {\r\n    this.setState({\r\n      allHaikus: array,\r\n    });\r\n  };\r\n\r\n  //function to Toggle Modal\r\n  toggleModal = () => {\r\n    this.setState({\r\n      modalVisible: !this.state.modalVisible\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {this.state.verseVisible === 0 && (\r\n          <>\r\n            <Intro changeVerseVisible={this.changeVerseVisible} />\r\n          </>\r\n        )}\r\n\r\n        {/* Display only once the user clicks on 'create your own' - which sets the state to true */}\r\n        {this.state.headerVisible \r\n        ? <Header \r\n            modalVisible={this.state.modalVisible}\r\n            toggleModal={this.toggleModal}/> \r\n        : null}\r\n\r\n        {/* Display the modal based on the state */}\r\n        {this.state.modalVisible\r\n        ?   < Modal toggleModal={this.toggleModal}/>\r\n        : null\r\n        }\r\n      \r\n\r\n        <main>\r\n          {this.state.verseVisible === 1 && (\r\n            <Verse\r\n              updateHaiku={this.updateHaiku}\r\n              lineNumber={1}\r\n              line={this.state.line1}\r\n              totalNumSyllables={5}\r\n              changeVerseVisible={this.changeVerseVisible}\r\n            />\r\n          )}\r\n          \r\n          {this.state.verseVisible === 2 && (\r\n            <Verse\r\n              updateHaiku={this.updateHaiku}\r\n              lineNumber={2}\r\n              line={this.state.line2}\r\n              totalNumSyllables={7}\r\n              changeVerseVisible={this.changeVerseVisible}\r\n              goToPreviousLine={this.goToPreviousLine}\r\n            />\r\n          )}\r\n\r\n\r\n          {this.state.verseVisible === 3 && (\r\n            <Verse\r\n              updateHaiku={this.updateHaiku}\r\n              lineNumber={3}\r\n              line={this.state.line3}\r\n              totalNumSyllables={5}\r\n              startAgain={this.startAgain}\r\n              changeVerseVisible={this.changeVerseVisible}\r\n              goToPreviousLine={this.goToPreviousLine}\r\n            />\r\n          )}\r\n\r\n          {this.state.verseVisible < 4 && this.state.verseVisible > 0 && (\r\n            <Haiku\r\n              line1={this.state.line1}\r\n              line2={this.state.line2}\r\n              line3={this.state.line3}\r\n              active={this.state.verseVisible}\r\n            />\r\n          )}\r\n\r\n          {this.state.verseVisible === 4 && (\r\n            <Finish\r\n              line1={this.state.line1}\r\n              line2={this.state.line2}\r\n              line3={this.state.line3}\r\n            />\r\n          )}\r\n\r\n\r\n          {this.state.verseVisible <= 4 && this.state.verseVisible > 0 && (\r\n            <Logbook\r\n              allHaikus={this.state.allHaikus}\r\n              getHaikus={this.getHaikus}\r\n            />\r\n          )}\r\n        </main>\r\n\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}